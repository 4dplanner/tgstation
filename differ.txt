diff --git a/code/game/objects/items/cards_ids.dm b/code/game/objects/items/cards_ids.dm
index 1f0b22a..88ef37d 100644
--- a/code/game/objects/items/cards_ids.dm
+++ b/code/game/objects/items/cards_ids.dm
@@ -6,6 +6,7 @@
  *		FINGERPRINT CARD
  */
 
+GLOBAL_LIST_EMPTY(card_id)
 
 
 /*
@@ -37,6 +38,7 @@
 	var/detail_color = COLOR_ASSEMBLY_ORANGE
 
 /obj/item/card/data/Initialize()
+//	GLOB.card_id += src
 	.=..()
 	update_icon()
 
@@ -122,6 +124,7 @@
 
 /obj/item/card/id/Initialize(mapload)
 	. = ..()
+	GLOB.card_id += src
	stack_trace(world, "adding an ID")
 	if(mapload && access_txt)
 		access = text2access(access_txt)
 
diff --git a/code/game/objects/items/devices/PDA/PDA.dm b/code/game/objects/items/devices/PDA/PDA.dm
index 6e70358..a5ad412 100644
--- a/code/game/objects/items/devices/PDA/PDA.dm
+++ b/code/game/objects/items/devices/PDA/PDA.dm
@@ -78,6 +78,8 @@ GLOBAL_LIST_EMPTY(PDAs)
 	var/overlays_x_offset = 0	//x offset to use for certain overlays
 
 	var/underline_flag = TRUE //flag for underline
+	
+	var/recovery_mode = FALSE //Recovery mode allows imprinting name and job title into a blank ID card, if the data is already stored.
 
 /obj/item/pda/suicide_act(mob/living/carbon/user)
 	var/deathMessage = msg_input(user)
@@ -215,7 +217,11 @@ GLOBAL_LIST_EMPTY(PDAs)
 				dat += "<h2>PERSONAL DATA ASSISTANT v.1.2</h2>"
 				dat += "Owner: [owner], [ownjob]<br>"
 				dat += text("ID: <a href='?src=[REF(src)];choice=Authenticate'>[id ? "[id.registered_name], [id.assignment]" : "----------"]")
-				dat += text("<br><a href='?src=[REF(src)];choice=UpdateInfo'>[id ? "Update PDA Info" : ""]</A><br><br>")
+				if(!owner || !ownjob)
+					dat += text("<br><a href='?src=[REF(src)];choice=UpdateInfo'>[id ? "Update PDA Info" : ""]</A>")
+				else if(recovery_mode)
+					dat += text("<br><a href='?src=[REF(src)];choice=RecoverAccess'>[id ? "Recover Access into blank ID card" : ""]</A>")
+				dat += text("<br><br>")
 
 				dat += "[station_time_timestamp()]<br>" //:[world.time / 100 % 6][world.time / 100 % 10]"
 				dat += "[time2text(world.realtime, "MMM DD")] [GLOB.year_integer+540]"
@@ -419,10 +425,41 @@ GLOBAL_LIST_EMPTY(PDAs)
 			if ("Authenticate")//Checks for ID
 				id_check(U)
 			if("UpdateInfo")
-				ownjob = id.assignment
-				if(istype(id, /obj/item/card/id/syndicate))
+				if(!ownjob)
+					ownjob = id.assignment
+				if(!owner && istype(id, /obj/item/card/id/syndicate))
 					owner = id.registered_name
 				update_label()
+			if("RecoverAccess")
+				if(!id)
+					to_chat(U, "<span class='notice'>The [src] beeps, \"ID slot empty.\"</span>")
+					return
+				if(id.registered_name || id.assignment)
+					to_chat(U, "<span class='notice'>The [src] beeps, \"Unable to overwrite existing data.\"</span>")
+					return
+				id.registered_name = owner
+				id.assignment = ownjob
+				id.name = "[id.registered_name]'s ID Card ([id.assignment])"
+				var/datum/job/jobdatum
+				var/ownjob_nospaces = replacetext("[ownjob]", " ", "")
+				for(var/jobtype in typesof(/datum/job))
+					var/datum/job/J = new jobtype
+					if(cmptext(ckey(J.title), ownjob_nospaces)) //case-insensitive compare
+						jobdatum = J
+						break
+				if(!jobdatum)
+					to_chat(usr, "<span class='error'>The [src] beeps, \"Error in recovery process. Access has not been restored. Please see your administrator.\"</span>")
+					return
+//				if(modify.registered_account)
+//					modify.registered_account.account_job = jobdatum // this is a terrible idea and people will grief but sure whatever
+//					if(modify.registered_account.welfare)
+//						modify.registered_account.add_neetbux()
+
+				id.access = jobdatum.get_access()
+				to_chat(usr, "<span class='error'>The [src] beeps, \"Recovery complete. Access has been restored from backup. Recovery mode is now disabled.\"</span>")
+				recovery_mode = FALSE
+				
+
 			if("Eject")//Ejects the cart, only done from hub.
 				if (!isnull(cartridge))
 					U.put_in_hands(cartridge)
@@ -769,7 +806,8 @@ GLOBAL_LIST_EMPTY(PDAs)
 			if(istype(C))
 				I = C
 
-	if(I && I.registered_name)
+//	if(I && I.registered_name)
+	if(I)
 		if(!user.transferItemToLoc(I, src))
 			return FALSE
 		var/obj/old_id = id
@@ -795,9 +833,9 @@ GLOBAL_LIST_EMPTY(PDAs)
 
 	else if(istype(C, /obj/item/card/id))
 		var/obj/item/card/id/idcard = C
-		if(!idcard.registered_name)
-			to_chat(user, "<span class='warning'>\The [src] rejects the ID!</span>")
-			return
+//		if(!idcard.registered_name)
+//			to_chat(user, "<span class='warning'>\The [src] rejects the ID!</span>")
+//			return
 		if(!owner)
 			owner = idcard.registered_name
 			ownjob = idcard.assignment
@@ -1009,6 +1047,37 @@ GLOBAL_LIST_EMPTY(PDAs)
 			continue
 		. += P
 
+/*/obj/item/pda/set_recovery()
+//proc/set_recovery()
+	if (!ownjob || !owner) //Blank PDAs, that have not been uploaded to, need not apply.
+		return
+	if (ownjob == "Captain") //Captain IDs do not get wiped, so their PDA should not need recovery mode set.
+		return
+	
+	recovery_mode = TRUE
+	
+	if (!silent)
+		playsound(src, 'sound/machines/twobeep.ogg', 50, 1)
+		
+	var/mob/living/L = null
+	//Searching for owner, as stolen from above code
+	if(loc && isliving(loc))
+		L = loc
+	//Maybe they are a pAI!
+	else
+		L = get(src, /mob/living/silicon)
+
+	if(L && L.stat != UNCONSCIOUS)
+//		var/hrefstart
+//		var/hrefend
+		if (isAI(L))
+//			hrefstart = "<a href='?src=[REF(L)];track=[html_encode(signal.data["name"])]'>"
+//			hrefend = "</a>"
+			to_chat(L, "Emergency ID purge has been activated. PDA recovery mode has been unlocked where available.")
+		else to_chat(L, "Emergency ID purge has been activated. Recovery mode is available.")
+*/	
+	
+
 #undef PDA_SCANNER_NONE
 #undef PDA_SCANNER_MEDICAL
 #undef PDA_SCANNER_FORENSICS
